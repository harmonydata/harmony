'''
MIT License

Copyright (c) 2023 Ulster University (https://www.ulster.ac.uk).
Project: Harmony (https://harmonydata.ac.uk)
Maintainer: Thomas Wood (https://fastdatascience.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

'''

import sys
import unittest

sys.path.append("../src")

from harmony import convert_pdf_to_instruments
from harmony.schemas.requests.text import RawFile
from harmony import download_models
from harmony import group_token_spans_by_class

pdf_gad_7_2_questions = RawFile.model_validate({
    "file_id": "d39f31718513413fbfc620c6b6135d0c",
    "file_name": "GAD-7.pdf",
    "file_type": "pdf",
    "content": "data:application/pdf;base64,"
})

download_models()


class TestConvertPdf(unittest.TestCase):

    def test_single_instrument(self):
        self.assertEqual(1, len(convert_pdf_to_instruments(pdf_gad_7_2_questions)))

    def test_two_questions(self):
        self.assertEqual(2, len(convert_pdf_to_instruments(pdf_gad_7_2_questions)[0].questions))


class TestTokenGroupingByClass(unittest.TestCase):
    def test_multiple_questions_answers_others(self):
        input_classes = ["question", "question", "question", "question",
                         "answer",
                         "other", "other", "other", "other", "other", "other",
                         "question", "question", "question", "question",
                         "answer",
                         "other", "other", "other", "other", "other", "other"]
        input_tokens = ['▁How', '▁are', '▁you', '?',
                        "▁5",
                        ".", "▁lore", "m", "▁ipsum", "▁dolor", ".",
                        "▁How", "▁are", "▁you", "?",
                        "▁8",
                        ".", "▁lore", "m", "▁ipsum", "▁dolor", "."]
        expected_output = {"question": ["How are you?", "How are you?"],
                           "answer": ["5", "8"],
                           "other": [". lorem ipsum dolor.", ". lorem ipsum dolor."]}
        output = group_token_spans_by_class(input_tokens, input_classes)
        self.assertDictEqual(expected_output, output)


if __name__ == '__main__':
    unittest.main()
